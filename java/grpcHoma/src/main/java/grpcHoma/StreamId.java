/* Copyright (c) 2021 Stanford University
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package grpcHoma;

import java.net.InetSocketAddress;

/**
 * Holds information identifying a stream (which represents a gRPC RPC) in a
 * form that can be used as a key in HashMap.
 */
public class StreamId {
    // Address of the other end of this stream (could be either client
    // or server).
    public InetSocketAddress address;

    // Uniquely identifies this gRPC RPC among all those from this client.
    public int sid;

    /**
     * Constructor for StreamId
     * @param address
     *      Address of the other end of this stream.
     * @param sid
     *      Unique sequence number generated by client.
     */
    public StreamId(InetSocketAddress address, int sid) {
        this.address = address;
        this.sid = sid;
    }

    /**
     * Returns a hash value representing the contents of the object (so
     * it can be used in HashMaps).
     */
    @Override
    public int hashCode() {
        return address.hashCode() ^ sid;
    }

    /**
     * Tests whether this object is logically equal to some other object.
     * @param o
     *      Other object to test against.
     * @return
     *      True means equal, false means not equal.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if ((o == null) || (getClass() != o.getClass())) {
            return false;
        }
        StreamId other = (StreamId) o;
        return (sid == other.sid) && (address.equals(other.address));
    }
}
