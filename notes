Miscellaneous notes about a Homa plugin for gRPC:
-------------------------------------------------

* Notes about java implementation:
  * Find out what scheduledExecutorService is.
  * Check for other client Listener callbacks that need to be made.
  * Invoke stream tracers.
  * Support long messages.
  * Log error in RpcSpec.getInetSocketAddress (find all System.out refs)
  * Add count of entries to metadata wire format?

* TODO list:
  * Add proper channelz support
  * Deal with recv_initial_metadata.recv_flags
  * Make HomaStream instance variables protected

* Various notes about how gRPC works:
  * A "stream" is the embodiment of a particular RPC.
  * "Plucking" a completion queue means extracting a particular desired
    event, rather than any available event.
  * GRPC_ARG_MAX_METADATA_SIZE: channel argument type, defined in grpc_types.h

* Questions for gRPC experts:
  * Client side:
    * How does the target host address find its way to the transport?
      see grpc_cronet_secure_channel_create: target argument
      Target passed to CreateChannelImpl!
    * How to hook up pollsets to receive results?
    * Role of arguments for channels?
      * Key-value pairs (latency characteristics?)
      * Channels with different arguments cannot share a single subchannel
      * None may matter for me?
    * What is metadata? Name-value pairs, like HTTP headers
    * Which things do I have to serialize? Metadata isn't serialized, and
      message body may also be in multiple chunks.
  * Synchronization
    * Can a stream have multiple active calls? Stream == RPC, not connection,
      but can still have multiple calls.
  * Server side:
    * Do I need to create a channel for each incoming stream?
      No: see set_accept_stream in the grpc_transport_op structure
      passed to the perform_op transport callback.
    * No channels on server
    * What is the rendezvous mechanism between incoming request and
      outgoing response?
  * Access from languages other than C++? Do I have to create a library
    for each language?)?
    * Wrapped languages use the C API, and the C API is intended *only*
      for wrapped languages. There is no official C interface.
    * Surface API: *core* grpc.h
  * Coding conventions: they recommend following the Google C++ style guide;
    all gRPC C++ files attempt to follow this.
  * What are the rules for storage allocation? Arenas?
    C++ new is now fine.
  * OK to use STL instead of gpr stuff (e.g. mutex)
    STL is fine except for synchronization, where they prefer
    grpc::internal::Mutex in C++ and grpc_core::Mutex in C.
    There is a lock_guard equivalent (mutex_lock?)
    lockguard -- grpc_core::MutexLock
    unique_lock - grpc_core::ReleaseableMutexLock
  * What is the role of combiners?
    Collect a bunch of ops, do them all on a single thread, possibly merge writes
    Not essential, just for performance
  * Secure connections: how do these interact with transports?
    * Just hook into the right places: grpc_secure_channel_create
  * Compression: any impact on transports?
    * 2 forms of compression: message compression and stream compression.
      Message compression happens above the level of the transport; stream
      compression happens in the transport (e.g., compress several messages
      together) but it's unclear how much benefit this provides
    * I can ignore compression for now
    * See link in bookmarks for more information.
  * Load balancing
    * Forgot to ask about this
    * What load is being balanced (server-side?)
    * How does it interact with transports
  * Channelz support

Other notes from phone call on 12/8:
  * There are two layers of channel: top channels and subchannel.
  * A single subchannel can be shared among multiple top channels
  * See end-to-end tests, such as grpc/test/core/end2end/tests/simple_request.cc
  * YouTube video on gRPC internal structure:
    https://www.youtube.com/watch?v=S7WIYLcPS1Y&feature=youtu.be
  * The authority metadata should be target host name (no port?),
    not "homa.authority"

* Add plugin to gRPC: grpc_register_plugin

* ExecCtx: used to collect a bunch of work to do, which can then be done
  later at a higher stack level in order to avoid locking issues if it's
  done right away.

* Endpoints: looks like they keep track of socket-like objects (perhaps
  a portability layer)?

* Basic client request:
  * client_unary_call.h: BlockingUnaryCallImpl
  * creates a Call object
  * invokes PerformOps on that Call
    * call.cc: call_start_batch
      * call.cc: execute_batch
        * call_combiner.cc: CallCombiner::Start schedules a closure
      * closure callback to call_combiner.cc: execute_batch_in_call_combiner
        * client_channel.cc: CallData::StartTransportStreamOpBatch
  * calls CompletionQueue::pluck to wait for results

* Levels in creating a client-side channel:
  * grpc::CreateChannel                              [create_channel.cc:33]
  * grpc::CreateCustomChannel                        [create_channel.cc:50]
  * InsecureChannelCredentialsImpl::CreateChannelImpl[insecure_credentials.cc:37]
  * InsecureChannelCredentialsImpl::CreateChannelWithInterceptors
                                                     [insecure_credentials.cc:50]
  * grpc_insecure_channel_create                     [channel_create.cc:105]
  * grpc_core::CreateChannel                         [channel_create.cc:66]
  * grpc_channel_create                              [channel.cc:271]
  * grpc_channel_create_with_builder                 [channel.cc:61]

* Levels in creating client-side socket:
  * BlockingUnaryCall                                [client_unary_call.h:40]
  * BlockingUnaryCallImpl                            [client_unary_call.h:69]
  * CoreCodegen::grpc_completion_queue_pluck         [core_codegen.cc:74]
  * grpc_completion_queue_pluck                      [completion_queue.cc:1324]
  * cq_pluck                                         [completion_queue.cc:1297]
  * grpc_pollset_work                                [pollset.cc:48]
  * pollset_work                                     [ev_posix.cc:323]
  * pollset_work                                     [ev_epollex_linux.cc:1137]
  * ExecCtx::Flush                                   [exec_ctx.cc:153]
  * exec_ctx_run                                     [exec_ctx.cc:40]
  * AresDnsResolver::OnResolved                      [dns_resolver_ares.cc:327]
  * grpc_core::WorkSerializer::Run                   [work_serializer.cc:152]
  * grpc_core::WorkSerializer::WorkSerializerImpl::Run
                                                     [work_serializer.cc:67]
  * std::function ...
  * AresDnsResolver::<lambda()>::operator()          [dns_resolver_ares.cc:327]
  * AresDnsResolver::OnResolvedLocked                [dns_resolver_ares.cc:365]
  * ResolvingLoadBalancingPolicy::ResolverResultHandler::ReturnResult
                                                     [resolving_lb_policy.cc:89]
  * ResolvingLoadBalancingPolicy::OnResolverResultChangedLocked
                                                     [resolving_lb_policy.cc:337]
  * ResolvingLoadBalancingPolicy::CreateOrUpdateLbPolicyLocked
                                                     [resolving_lb_policy.cc:251]
  * ChildPolicyHandler::UpdateLocked                 [child_policy_handler.cc:238]
  * PickFirst::UpdateLocked                          [pick_first.cc:281]
  * PickFirst::AttemptToConnectUsingLatestUpdateArgsLocked
                                                     [pick_first.cc:237]
  * ChannelData::SubchannelWrapper::AttemptToConnect [client_channel.cc:979]
  * Subchannel::AttemptToConnect                     [subchannel.cc:894]
  * Subchannel::MaybeStartConnectingLocked           [subchannel.cc:1003]
  * Subchannel::ContinueConnectingLocked             [subchannel.cc:1056]
  * Chttp2Connector::Connect                         [chttp2_connector.cc:74]
  * grpc_tcp_client_connect                          [tcp_client.cc:30]
  * tcp_connect                                      [tcp_client_posix.cc:341]
  * grpc_tcp_client_prepare_fd                       [tcp_client_posix.cc:258]
  * grpc_create_dualstack_socket                     [socket_utils_common_posix.cc:452]
  * grpc_create_dualstack_socket_using_factory       [socket_utils_common_posix.cc:470]

* Levels in first client-side call to write:
  * BlockingUnaryCall                                [client_unary_call.h:40]
  * BlockingUnaryCallImpl                            [client_unary_call.h:69]
  * CoreCodegen::grpc_completion_queue_pluck         [core_codegen.cc:74]
  * grpc_completion_queue_pluck                      [completion_queue.cc:1324]
  * cq_pluck                                         [completion_queue.cc:1297]
  * grpc_pollset_work                                [pollset.cc:48]
  * pollset_work                                     [ev_posix.cc:323]
  * pollset_work                                     [ev_epollex_linux.cc:1137]
  * ExecCtx::Flush                                   [exec_ctx.cc:156]
  * grpc_combiner_continue_exec_ctx                  [combiner.cc:252]
  * write_action_begin_locked                        [chttp2_transport.cc:952]
  * write_action                                     [chttp2_transport.cc:978]
  * grpc_endpoint_write                              [endpoint.cc:32]
  * tcp_write                                        [tcp_posix.cc:1559]

* Levels to invoke client perform_stream_op:
  * 

* Levels in creating server (top down; doesn't actually open socket):
  * ServerBuilder::BuildAndStart                     [server_builder.cc:399]
  * Server::AddListeningPort                         [server_cc.cc:1092]
  * creds->AddPortToServer(grpc_server*)             [insecure_server_credentials:29]
  * grpc_server_add_insecure_http2_port              [server_chttp2.cc:35]
  * grpc_core::Chttp2ServerAddPort(Server*)          [chttp2_server.cc:478]
  * grpc_core::Chttp2ServerListener::Create          [chttp2_server.cc:285]
  * grpc_tcp_server_create(Server::ListenerInterface) simply dispatches
  * tcp_server_create()                              [tcp_server_posix.cc:67]

* Levels to open socket on server (top down):
  * Server::AddListeningPort                         [server_cc.cc:1092]
  * creds->AddPortToServer(grpc_server*)             [insecure_server_credentials:29]
  * grpc_server_add_insecure_http2_port              [server_chttp2.cc:37]
  * grpc_core::Chttp2ServerAddPort                   [chttp2_server.cc:478]
    (just delegates)
  * Chttp2ServerListener::Create                     [chttp2_server.cc:290]
  * grpc_tcp_server_add_port                         [tcp_server.cc:40]
    (just delegates)
  * tcp_server_add_port                              [tcp_server_posix.cc:437]
    (parses address)
  * add_wildcard_addrs_to_server                     [tcp_server_posix.cc:306]
  * grpc_tcp_server_add_addr                         [tcp_server_utils_posix_common.cc:134]
  * grpc_create_dualstack_socket                     [socket_utils_common_posix.cc:452]
  * create_socket                                    [socket_utils_common_posix.cc:460]

* Levels to register for callbacks (top down):
  * ServerBuilder::BuildAndStart                     [server_builder.cc:411]
  * Server::Start                                    [server_cc.cc:1168]
  * grpc_server_start   (pure dispatch)              [server.cc:1489]
  * grpc_core::Server::Start                         [server.cc:574]
  * Server::ListenerInterface::Start                 [chttp2_server.cc:387]
    (takes std::vector<grpc_pollset*>*, just delegates)
  * grpc_tcp_server_start (dispatches through vtable)
  * tcp_server_start                                 [tcp_server_posix.cc:519]

* Issues to resolve
  * Poll sets
  * Deadlines

* Notes on building Java channels for TCP:
  * NettyChannelBuilder constructed by NettyChannelBuilder.forTarget
    (called by ManagedChannelBuilder.forAddress)
  * NettyChannelBuilder.buildTransportFactory creates a NettyTransportFactory
    (subclass of ClientTransportFactory)
    (invoked from ManagedChannelBuilder.build)
  * NettyTransportFactory.newClientTransport creates a NettyClientTransport
    (subclass of ConnectionClientTransport)
    (invoked in separate thread...)
  * Very thin class NettyChannelTransportFactory has one method,
    buildClientTransportFactory, which invokes
    NettyChannelBuilder.buildTransportFactory
    which creates a NettyTransportFactory

Modules to read:
   553   1308  14046 AbstractHttp2Headers.java
   249    772   8191 AbstractNettyHandler.java
    45    176   1410 CancelClientStreamCommand.java
    71    226   1978 CancelServerStreamCommand.java
    95    295   2612 ClientTransportLifecycleManager.java
    57    204   1751 CreateStreamCommand.java
    53    190   1800 FixedKeyManagerFactory.java
    53    188   1833 FixedTrustManagerFactory.java
    35    153   1031 ForcefulCloseCommand.java
    35    149   1009 GracefulCloseCommand.java
    53    194   1634 GracefulServerCloseCommand.java
   110    403   3693 GrpcHttp2ConnectionHandler.java
   520   1749  17125 GrpcHttp2HeadersUtils.java
   157    513   5125 GrpcHttp2OutboundHeaders.java
   305   1028  11288 GrpcSslContexts.java
   118    466   5287 Http2ControlFrameLimitEncoder.java
    31    158   1192 InsecureFromHttp1ChannelCredentials.java
    36    148   1192 InternalGracefulServerCloseCommand.java
   107    366   3806 InternalNettyChannelBuilder.java
    63    244   2215 InternalNettyChannelCredentials.java
    83    292   3068 InternalNettyServerBuilder.java
    69    280   2682 InternalNettyServerCredentials.java
    46    163   1383 InternalNettySocketSupport.java
    53    178   1615 InternalProtocolNegotiationEvent.java
    67    204   2091 InternalProtocolNegotiator.java
   171    510   5643 InternalProtocolNegotiators.java
    35    148   1146 InternalWriteBufferingAndExceptionHandlerUtils.java
   113    355   3423 JettyTlsUtil.java
   117    441   3682 KeepAliveEnforcer.java
   130    414   3967 MaxConnectionIdleManager.java
    41    171   1187 NegotiationType.java
   763   2612  30239 NettyChannelBuilder.java
    42    160   1383 NettyChannelCredentials.java
    55    187   1711 NettyChannelProvider.java
  1034   3549  41188 NettyClientHandler.java
   349   1126  12693 NettyClientStream.java
   432   1504  17263 NettyClientTransport.java
   133    373   3135 NettyReadableBuffer.java
   475   1346  18360 NettyServer.java
   692   2979  29920 NettyServerBuilder.java
    37    152   1291 NettyServerCredentials.java
  1073   3069  40867 NettyServerHandler.java
    53    176   1568 NettyServerProvider.java
   244    650   7978 NettyServerStream.java
   282    760   9720 NettyServerTransport.java
    74    278   2338 NettySocketSupport.java
    39    189   1616 NettySslContextChannelCredentials.java
    39    188   1603 NettySslContextServerCredentials.java
    61    183   1407 NettyWritableBuffer.java
    53    279   2039 NettyWritableBufferAllocator.java
    90    262   2572 ProtocolNegotiationEvent.java
    66    289   2193 ProtocolNegotiator.java
  1093   3526  43414 ProtocolNegotiators.java
   132    365   3236 SendGrpcFrameCommand.java
    41    159   1176 SendPingCommand.java
    85    284   2585 SendResponseHeadersCommand.java
    29    122    771 StreamIdHolder.java
    31    153   1072 UnhelpfulSecurityProvider.java
   514   1704  20618 Utils.java
   257   1015   9503 WriteBufferingAndExceptionHandler.java
   240    838   6861 WriteQueue.java
    22    121    805 package-info.java
 12201  40684 439230 total
